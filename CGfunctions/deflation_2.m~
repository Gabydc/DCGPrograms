function [px,flag,relres,ii,resvec] = dpcg(A,b,Z,tol,maxit,M1,M2,x0,varargin)
%DPCG  Deflated Preconditioned Conjugate Gradients Method.
%   X = DPCG(A,B,Z) attempts to solve the system of linear equations PA*X=PB for
%   X. The N-by-N coefficient matrix A must be symmetric and positive
%   definite, the right hand side column vector B must have length N, the 
%   matrix X must have N rows.
%
%   X = DPCG(AFUN,B) accepts a function handle AFUN instead of the matrix A.
%   AFUN(X) accepts a vector input X and returns the matrix-vector product
%   A*X. In all of the following syntaxes, you can replace A by AFUN.
%
%   X = DPCG(A,B,Z,TOL) specifies the tolerance of the method. If TOL is []
%   then PCG uses the default, 1e-6.
%
%   X = DPCG(A,B,Z,TOL,MAXIT) specifies the maximum number of iterations. If
%   MAXIT is [] then PCG uses the default, min(N,20).
%
%   X = DPCG(A,B,Z,TOL,MAXIT,M) and X = PCG(A,B,TOL,MAXIT,M1,M2) use symmetric
%   positive definite preconditioner M or M=M1*M2 and effectively solve the
%   system inv(M)*A*X = inv(M)*B for X. If M is [] then a preconditioner
%   is not applied. M may be a function handle MFUN returning M\X.
%
%   X = DPCG(A,B,Z,TOL,MAXIT,M1,M2,X0) specifies the initial guess. If X0 is
%   [] then PCG uses the default, an all zero vector.
%
%   [X,FLAG] = DPCG(A,B,...) also returns a convergence FLAG:
%    0 DPCG converged to the desired tolerance TOL within MAXIT iterations
%    1 DPCG iterated MAXIT times but did not converge.
%    2 preconditioner M was ill-conditioned.
%    3 DPCG stagnated (two consecutive iterates were the same).
%    4 one of the scalar quantities calculated during PCG became too
%      small or too large to continue computing.
%
%   [X,FLAG,RELRES] = DPCG(A,B,...) also returns the relative residual
%   NORM(B-A*X)/NORM(B). If FLAG is 0, then RELRES <= TOL.
%
%   [X,FLAG,RELRES,ITER] = DPCG(A,B,...) also returns the iteration number
%   at which X was computed: 0 <= ITER <= MAXIT.
%
%   [X,FLAG,RELRES,ITER,RESVEC] = DPCG(A,B,...) also returns a vector of the
%   estimated residual norms at each iteration including NORM(B-A*X0).
%
%   Example:
%      n1 = 21; A = gallery('moler',n1);  b1 = A*ones(n1,1);
%      tol = 1e-6;  maxit = 15;  M = diag([10:-1:1 1 1:10]);
%      [x1,flag1,rr1,iter1,rv1] = dpcg(A,b1,tol,maxit,M);
%   Or use this parameterized matrix-vector product function:
%      afun = @(x,n)gallery('moler',n)*x;
%      n2 = 21; b2 = afun(ones(n2,1),n2);
%      [x2,flag2,rr2,iter2,rv2] = dpcg(@(x)afun(x,n2),b2,tol,maxit,M);
%
%   Class support for inputs A,B,M1,M2,X0 and the output of AFUN:
%      float: double
%
%   See also BICG, BICGSTAB, BICGSTABL, CGS, GMRES, LSQR, MINRES, QMR,
%   SYMMLQ, TFQMR, ICHOL, FUNCTION_HANDLE.

%   Copyright 1984-2013 The MathWorks, Inc.

if (nargin < 3)
    error(message('MATLAB:dpcg:NotEnoughInputs'));
end

% Determine whether A is a matrix or a function.
[atype,afun,afcnstr] = iterchk(A);
if strcmp(atype,'matrix')
    % Check matrix and right hand side vector inputs have appropriate sizes
    [m,n] = size(A);
    if (m ~= n)
        error(message('MATLAB:dpcg:NonSquareMatrix'));
    end
    if ~isequal(size(b),[m,1])
        error(message('MATLAB:dpcg:RSHsizeMatchCoeffMatrix', m));
    end
        if ~isequal(size(Z,1),m)
        error(message('MATLAB:dpcg:ZsizeMatchCoeffMatrix', m));
    end
else
    m = size(b,1);
    n = m;
    if ~iscolumn(b)
        error(message('MATLAB:dpcg:RSHnotColumn'));
    end
end

% Assign default values to unspecified parameters
if (nargin < 4) || isempty(tol)
    tol = 1e-6;
end
warned = 0;
if tol <= eps
    warning(message('MATLAB:dpcg:tooSmallTolerance'));
    warned = 1;
    tol = eps;
elseif tol >= 1
    warning(message('MATLAB:dpcg:tooBigTolerance'));
    warned = 1;
    tol = 1-eps;
end
if (nargin < 5) || isempty(maxit)
    maxit = min(n,20);
end


E=A*Z;
E=Z'*E;                            %Galerkin matrix
EI=sparse(inv(E));

% Check for all zero right hand side vector => all zero solution
n2b = norm(b);                     % Norm of rhs vector, b
[Pb]=dvect(Z,EI,A,b);
n2Pb = norm(Pb);                     % Norm of rhs vector, b
if (n2b == 0)                      % if    rhs vector is all zeros
    x = zeros(n,1);                % then  solution is all zeros
    flag = 0;                      % a valid solution has been obtained
    relres = 0;                    % the relative residual is actually 0/0
    ii = 0;                      % no iterations need be performed
    resvec = 0;                    % resvec(1) = norm(b-A*x) = norm(0)
    if (nargout < 3)
        itermsg('dpcg',tol,maxit,0,flag,ii,NaN);
    end
    return
end

if ((nargin >= 6) && ~isempty(M1))
    existM1 = 1;
    [m1type,m1fun,m1fcnstr] = iterchk(M1);
    if strcmp(m1type,'matrix')
        if ~isequal(size(M1),[m,m])
            error(message('MATLAB:dpcg:WrongPrecondSize', m));
        end
    end
else
    existM1 = 0;
    m1type = 'matrix';
end

if ((nargin >= 7) && ~isempty(M2))
    existM2 = 1;
    [m2type,m2fun,m2fcnstr] = iterchk(M2);
    if strcmp(m2type,'matrix')
        if ~isequal(size(M2),[m,m])
            error(message('MATLAB:dpcg:WrongPrecondSize', m));
        end
    end
else
    existM2 = 0;
    m2type = 'matrix';
end

if ((nargin >= 8) && ~isempty(x0))
    if ~isequal(size(x0),[n,1])
        error(message('MATLAB:dpcg:WrongInitGuessSize', n));
    else
        x = x0;
    end
else
    x = zeros(n,1);
end


if ((nargin > 8) && strcmp(atype,'matrix') && ...
        strcmp(m1type,'matrix') && strcmp(m2type,'matrix'))
    error(message('MATLAB:dpcg:TooManyInputs'));
end

% Set up for the method
 
px=x;

flag = 1;
xmin = x;                          % Iterate which has minimal residual so far
imin = 0;                          % Iteration at which xmin was computed
tolb = tol * n2b;                  % Relative tolerance
tolPb = tol * n2Pb;                  % Relative tolerance
r = b - iterapp('mtimes',afun,atype,afcnstr,x,varargin{:});
normr = norm(r);                   % Norm of residual
normr_act = normr;



if (normr <= tolb)                 % Initial guess is a good enough solution
    flag = 0;
    relres = normr / n2b;
    ii = 0;
    resvec = normr;
    
    if (nargout < 2)
        itermsg('dpcg',tol,maxit,0,flag,ii,relres);
    end
    return
end
%Deflated residual
[Pr]=dvect(Z,EI,A,r);
r=Pr;
normr = norm(r);                   % Norm of residual
normr_act = normr;

if (normr <= tolb)                 % Initial guess is a good enough solution
    flag = 0;
    relres = normr / n2Pb;
    ii = 0;
    resvec = normr;
    
    if (nargout < 2)
        itermsg('dpcg',tol,maxit,0,flag,ii,relres);
    end
    return
end

resvec = zeros(maxit+1,1);         % Preallocate vector for norm of residuals
resvec(1,:) = normr;               % resvec(1) = norm(b-A*x0)
normrmin = normr;                  % Norm of minimum residual
rho = 1;
stag = 0;                          % stagnation of the method
moresteps = 0;
maxmsteps = min([floor(n/50),5,n-maxit]);
maxstagsteps = 3;

z=Z;
a=A;
e=z'*A*z;
EI=sparse(inv(e));
[pb]=dvect(z,EI,a,b);
%l=ichol(a);
lb=iterapp('mldivide',m1fun,m1type,m1fcnstr,b,varargin{:});
plb=iterapp('mldivide',m1fun,m1type,m1fcnstr,lb,varargin{:});
nor1=abs(lb'*lb);
xi=x;
%r0=b-a*xi;
%[r0]=deflatevect(z,EI,a,r0);
%r0=l\r0;
%p0=l'\r0;
nor=abs(lb'*lb);    

     if existM1
        r0 = iterapp('mldivide',m1fun,m1type,m1fcnstr,r,varargin{:});
        if ~all(isfinite(y))
            flag = 2;
            break
        end
    else % no preconditioner
        r0 = r;
    end
 %r0=iterapp('mldivide',m1fun,m1type,m1fcnstr,r,varargin{:});
% p0=iterapp('mldivide',m2fun,m2type,m2fcnstr,r0,varargin{:});
% loop over maxit iterations (unless convergence or failure)
for ii=1:maxit

%     
     if existM2
         z0 = iterapp('mldivide',m2fun,m2type,m2fcnstr,r0,varargin{:});
         if ~all(isfinite(z0))
             flag = 2;
            break
         end
     else % no preconditioner
         z0 = r0;
     end
%     
      rho1 = rho;
    rho = r0' * r0;
    if ((rho == 0) || isinf(rho))
        flag = 4;
        break
    end
    if (ii == 1)
        p = z0;
    else
        beta = rho / rho1;
        if ((beta == 0) || isinf(beta))
            flag = 4;
            break
        end
        p = z0 + beta * p;
    end
    q = iterapp('mtimes',afun,atype,afcnstr,p,varargin{:});
        [ap]=dvect(z,EI,a,q);
%         [apt]=tdvect(z,EI,a,z0);
         pq = p' * q;
    if ((pq <= 0) || isinf(pq))
        flag = 4;
        break
    else
        %alpha = (r0'*r0) / pq;
        alpha = rho/ pq;
    end
    if isinf(alpha)
        flag = 4;
        break
    end
     %alpha=(r0'*r0)/(pq);   
      if existM1
         r1 = iterapp('mldivide',m1fun,m1type,m1fcnstr,ap,varargin{:});
         if ~all(isfinite(r0))
             flag = 2;
             break
         end
     else % no preconditioner
         r1 = ap;
     end
     xf=xi+alpha*p;
     %rl = iterapp('mldivide',m1fun,m1type,m1fcnstr,ap,varargin{:});
     r=r0-alpha*(r1);
     r0=r;
     color=[0.1 0.5 0.5];

     
      normr = norm(r);
    normr_act = normr;
    resvec(ii+1,1) = normr;
     
      ee=abs(r'*r)/nor;
     figure(123)
     hl1=semilogy(ii,ee,'p','Color',color);
     hold on
      % flag=0;

%      if (ee>=tol)
%          flag=1;
%      end
%      if flag==0
%          break
%      end     
     
         % check for convergence
    if (normr <= tolb || stag >= maxstagsteps || moresteps)
%         normr
%         tolb
        r = b - iterapp('mtimes',afun,atype,afcnstr,xf,varargin{:});
        
        normr_act = norm(r);
        resvec(ii+1,1) = normr_act;
        %Deflated residual
%         [Pr]=dvect(Z,EI,A,r);
%         r=Pr;
        if (normr_act <= tolb)
            flag = 0;
            iter = ii;
            break
        else
            if stag >= maxstagsteps && moresteps == 0
                stag = 0;
            end
            moresteps = moresteps + 1;
            if moresteps >= maxmsteps
                if ~warned
                    warning(message('MATLAB:pcg:tooSmallTolerance'));
                end
                flag = 3;
                iter = ii;
                break;
            end
        end
    end
     xi=xf;
     
end
[xf]=tdeflatevect(z,EI,a,xf);
qb=z'*b;
qb=EI*qb;
qb=z*qb;
xf=qb+xf;
%iter=ii;
relres=ee;
px=xf;
% returned solution is first with minimal residual
% if (flag == 0)
%     px=qvect(Z,EI,b)+tdvect(Z,EI,x,b);
%     relres = normr_act / n2b;
% else
%     px=x;
%     r_comp = b - iterapp('mtimes',afun,atype,afcnstr,xmin,varargin{:});
%     if norm(r_comp) <= normr_act
%         x = xmin;
%         iter = imin;
%         relres = norm(r_comp) / n2b;
%     else
%         iter = ii;
%         relres = normr_act / n2b;
%     end
% end
% 
% % truncate the zeros from resvec
% if ((flag <= 1) || (flag == 3))
%     resvec = resvec(1:ii+1,:);
% else
%     resvec = resvec(1:ii,:);
% end

% only display a message if the output flag is not used
if (nargout < 2)
    itermsg('pcg',tol,maxit,ii,flag,ii,relres);
end
function[Qx]=qvect(Z,EI,x)
Qx=Z'*x;
Qx=EI*Qx;
Qx=Z*Qx;
end
function[Px]=dvect(Z,EI,A,x)
[Qx]=qvect(Z,EI,x);
Px=x-A*Qx;
end
function[Ptx]=tdvect(Z,EI,x,b)
    [Qb]=qvect(Z,EI,b);
Ptx=x-Qb;
end
end
